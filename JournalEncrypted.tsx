'use client'
import { useEffect, useRef, useState } from 'react'
function useLocalState<T>(key: string, initial: T) {
  const [val, setVal] = useState<T>(() => {
    try { const raw = localStorage.getItem(key); return raw ? JSON.parse(raw) : initial; } catch { return initial; }
  });
  useEffect(() => { try { localStorage.setItem(key, JSON.stringify(val)); } catch {} }, [key, val]);
  return [val, setVal] as const;
}
async function deriveKey(passphrase: string, salt: Uint8Array) {
  const enc = new TextEncoder();
  const baseKey = await crypto.subtle.importKey('raw', enc.encode(passphrase), { name: 'PBKDF2' }, false, ['deriveKey']);
  return crypto.subtle.deriveKey({ name: 'PBKDF2', salt, iterations: 250000, hash: 'SHA-256' }, baseKey, { name: 'AES-GCM', length: 256 }, false, ['encrypt','decrypt']);
}
const b64 = (a: ArrayBuffer) => btoa(String.fromCharCode(...new Uint8Array(a)));
const ub64 = (s: string) => new Uint8Array(atob(s).split('').map(c=>c.charCodeAt(0)));
async function encryptText(plain: string, passphrase: string){ const salt=crypto.getRandomValues(new Uint8Array(16)); const iv=crypto.getRandomValues(new Uint8Array(12)); const key=await deriveKey(passphrase,salt); const ct=await crypto.subtle.encrypt({name:'AES-GCM',iv},key,new TextEncoder().encode(plain)); return { s: b64(salt), i: b64(iv), c: b64(ct) } }
async function decryptText(blob:{s:string,i:string,c:string}, passphrase:string){ const salt=ub64(blob.s),iv=ub64(blob.i),ct=ub64(blob.c); const key=await deriveKey(passphrase,salt); const pt=await crypto.subtle.decrypt({name:'AES-GCM',iv},key,ct); return new TextDecoder().decode(pt) }
export default function JournalEncrypted(){ const [pass,setPass]=useState(''); const [title,setTitle]=useState(''); const [body,setBody]=useState(''); const [cipherList,setCipherList]=useLocalState<any[]>('aadi_journal_cipher',[]); const [entries,setEntries]=useState<any[]|null>(null); const fileRef=useRef<HTMLInputElement>(null);
  async function addEntry(){ if(!pass||!body.trim())return; const payload=JSON.stringify({title,body,at:new Date().toISOString()}); const blob=await encryptText(payload,pass); setCipherList([blob,...cipherList]); setTitle(''); setBody(''); }
  async function tryDecryptAll(){ if(!pass) return setEntries(null); try{ const out:any[]=[]; for(const b of cipherList) out.push(JSON.parse(await decryptText(b,pass))); setEntries(out);}catch{ setEntries(null); alert('Wrong passphrase or corrupted data'); } }
  function exportFile(){ const data=JSON.stringify({version:1, entries:cipherList}); const url=URL.createObjectURL(new Blob([data],{type:'application/json'})); const a=document.createElement('a'); a.href=url; a.download=`aadi-journal-${Date.now()}.json`; a.click(); URL.revokeObjectURL(url); }
  function importFile(e:React.ChangeEvent<HTMLInputElement>){ const f=e.target.files?.[0]; if(!f) return; const r=new FileReader(); r.onload=()=>{ try{ const obj=JSON.parse(String(r.result||'{}')); if(Array.isArray(obj.entries)) setCipherList(obj.entries.concat(cipherList)); else alert('Invalid file'); } catch{ alert('Invalid file'); } }; r.readAsText(f); if(fileRef.current) fileRef.current.value=''; }
  useEffect(()=>{ tryDecryptAll() },[pass,cipherList]);
  return (<main className="space-y-4"><section className="bg-zinc-900/60 border border-zinc-800 rounded-3xl p-5"><h2 className="font-semibold mb-2">Encrypted Journal</h2><div className="flex gap-2 items-end"><label className="text-sm text-zinc-300">Passphrase<input type="password" value={pass} onChange={e=>setPass(e.target.value)} className="block mt-1 bg-zinc-900 border border-zinc-800 rounded-2xl px-3 py-2 w-64"/></label><div className="text-xs text-zinc-500">Your passphrase is never stored.</div></div></section><section className="bg-zinc-900/60 border border-zinc-800 rounded-3xl p-5"><input value={title} onChange={e=>setTitle(e.target.value)} placeholder="Title (optional)" className="w-full mb-2 bg-zinc-900 border border-zinc-800 rounded-2xl px-3 py-2"/><textarea value={body} onChange={e=>setBody(e.target.value)} placeholder="Write privately. Data is encrypted on your device." className="w-full h-40 bg-zinc-900 border border-zinc-800 rounded-2xl p-3"/><div className="mt-3 flex gap-2"><button disabled={!pass||!body.trim()} onClick={addEntry} className="rounded-2xl px-5 py-2 bg-white text-black disabled:opacity-50">Add entry</button><button onClick={exportFile} className="rounded-2xl px-4 py-2 border border-zinc-700">Export</button><label className="rounded-2xl px-4 py-2 border border-zinc-700 cursor-pointer">Import<input ref={fileRef} type="file" accept="application/json" className="hidden" onChange={importFile}/></label></div></section><section className="bg-zinc-900/60 border border-zinc-800 rounded-3xl p-5"><h3 className="font-semibold mb-2">Entries</h3>{!pass && <p className="text-zinc-400 text-sm">Enter your passphrase to view entries.</p>}{pass && (<ul className="space-y-3">{(entries||[]).map((e,idx)=>(<li key={idx} className="p-3 rounded-2xl bg-zinc-900 border border-zinc-800"><div className="text-xs text-zinc-400">{new Date(e.at).toLocaleString()}</div>{e.title && <div className="font-semibold">{e.title}</div>}<div className="whitespace-pre-wrap text-zinc-200">{e.body}</div></li>))}{pass && (entries?.length||0)===0 && <li className="text-zinc-400">No entries yet.</li>}</ul>)}</section></main>) }
